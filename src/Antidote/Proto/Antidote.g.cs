// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: antidote.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Antidote.Proto {

  /// <summary>Holder for reflection information generated from antidote.proto</summary>
  internal static partial class AntidoteReflection {

    #region Descriptor
    /// <summary>File descriptor for antidote.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AntidoteReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5hbnRpZG90ZS5wcm90bxIOQW50aWRvdGUuUHJvdG8iLwoMQXBiRXJyb3JS",
            "ZXNwEg4KBmVycm1zZxgBIAEoDBIPCgdlcnJjb2RlGAIgASgNIh8KEEFwYkNv",
            "dW50ZXJVcGRhdGUSCwoDaW5jGAEgASgSIiIKEUFwYkdldENvdW50ZXJSZXNw",
            "Eg0KBXZhbHVlGAEgASgRIpEBCgxBcGJTZXRVcGRhdGUSNgoGb3B0eXBlGAEg",
            "ASgOMiYuQW50aWRvdGUuUHJvdG8uQXBiU2V0VXBkYXRlLlNldE9wVHlwZRIM",
            "CgRhZGRzGAIgAygMEgwKBHJlbXMYAyADKAwiLQoJU2V0T3BUeXBlEgsKB1VO",
            "S05PV04QABIHCgNBREQQARIKCgZSRU1PVkUQAiIeCg1BcGJHZXRTZXRSZXNw",
            "Eg0KBXZhbHVlGAEgAygMIh0KDEFwYlJlZ1VwZGF0ZRINCgV2YWx1ZRgBIAEo",
            "DCIeCg1BcGJHZXRSZWdSZXNwEg0KBXZhbHVlGAEgASgMIiEKD0FwYkdldE1W",
            "UmVnUmVzcBIOCgZ2YWx1ZXMYASADKAwiJgoPQXBiUG9saWN5VXBkYXRlEhMK",
            "C3Blcm1pc3Npb25zGAEgAygMIicKEEFwYkdldFBvbGljeVJlc3ASEwoLcGVy",
            "bWlzc2lvbnMYASADKAwiLAoQQXBiSW50ZWdlclVwZGF0ZRILCgNpbmMYASAB",
            "KBISCwoDc2V0GAIgASgSIiIKEUFwYkdldEludGVnZXJSZXNwEg0KBXZhbHVl",
            "GAEgASgSIkEKCUFwYk1hcEtleRILCgNrZXkYASABKAwSJwoEdHlwZRgCIAEo",
            "DjIZLkFudGlkb3RlLlByb3RvLkNSRFRfdHlwZSJzCgxBcGJNYXBVcGRhdGUS",
            "MwoHdXBkYXRlcxgBIAMoCzIiLkFudGlkb3RlLlByb3RvLkFwYk1hcE5lc3Rl",
            "ZFVwZGF0ZRIuCgtyZW1vdmVkS2V5cxgCIAMoCzIZLkFudGlkb3RlLlByb3Rv",
            "LkFwYk1hcEtleSJwChJBcGJNYXBOZXN0ZWRVcGRhdGUSJgoDa2V5GAEgASgL",
            "MhkuQW50aWRvdGUuUHJvdG8uQXBiTWFwS2V5EjIKBnVwZGF0ZRgCIAEoCzIi",
            "LkFudGlkb3RlLlByb3RvLkFwYlVwZGF0ZU9wZXJhdGlvbiI9Cg1BcGJHZXRN",
            "YXBSZXNwEiwKB2VudHJpZXMYASADKAsyGy5BbnRpZG90ZS5Qcm90by5BcGJN",
            "YXBFbnRyeSJnCgtBcGJNYXBFbnRyeRImCgNrZXkYASABKAsyGS5BbnRpZG90",
            "ZS5Qcm90by5BcGJNYXBLZXkSMAoFdmFsdWUYAiABKAsyIS5BbnRpZG90ZS5Q",
            "cm90by5BcGJSZWFkT2JqZWN0UmVzcCIOCgxBcGJDcmR0UmVzZXQiNgoQQXBi",
            "T3BlcmF0aW9uUmVzcBIPCgdzdWNjZXNzGAEgASgIEhEKCWVycm9yY29kZRgC",
            "IAEoDSI4ChBBcGJUeG5Qcm9wZXJ0aWVzEhIKCnJlYWRfd3JpdGUYASABKA0S",
            "EAoIcmVkX2JsdWUYAiABKA0iVgoOQXBiQm91bmRPYmplY3QSCwoDa2V5GAEg",
            "ASgMEicKBHR5cGUYAiABKA4yGS5BbnRpZG90ZS5Qcm90by5DUkRUX3R5cGUS",
            "DgoGYnVja2V0GAMgASgMImYKDkFwYlJlYWRPYmplY3RzEjQKDGJvdW5kb2Jq",
            "ZWN0cxgBIAMoCzIeLkFudGlkb3RlLlByb3RvLkFwYkJvdW5kT2JqZWN0Eh4K",
            "FnRyYW5zYWN0aW9uX2Rlc2NyaXB0b3IYAiABKAwieQoLQXBiVXBkYXRlT3AS",
            "MwoLYm91bmRvYmplY3QYASABKAsyHi5BbnRpZG90ZS5Qcm90by5BcGJCb3Vu",
            "ZE9iamVjdBI1CglvcGVyYXRpb24YAiABKAsyIi5BbnRpZG90ZS5Qcm90by5B",
            "cGJVcGRhdGVPcGVyYXRpb24i5wIKEkFwYlVwZGF0ZU9wZXJhdGlvbhIzCglj",
            "b3VudGVyb3AYASABKAsyIC5BbnRpZG90ZS5Qcm90by5BcGJDb3VudGVyVXBk",
            "YXRlEisKBXNldG9wGAIgASgLMhwuQW50aWRvdGUuUHJvdG8uQXBiU2V0VXBk",
            "YXRlEisKBXJlZ29wGAMgASgLMhwuQW50aWRvdGUuUHJvdG8uQXBiUmVnVXBk",
            "YXRlEjMKCWludGVnZXJvcBgEIAEoCzIgLkFudGlkb3RlLlByb3RvLkFwYklu",
            "dGVnZXJVcGRhdGUSKwoFbWFwb3AYBSABKAsyHC5BbnRpZG90ZS5Qcm90by5B",
            "cGJNYXBVcGRhdGUSLQoHcmVzZXRvcBgGIAEoCzIcLkFudGlkb3RlLlByb3Rv",
            "LkFwYkNyZHRSZXNldBIxCghwb2xpY3lvcBgHIAEoCzIfLkFudGlkb3RlLlBy",
            "b3RvLkFwYlBvbGljeVVwZGF0ZSJgChBBcGJVcGRhdGVPYmplY3RzEiwKB3Vw",
            "ZGF0ZXMYASADKAsyGy5BbnRpZG90ZS5Qcm90by5BcGJVcGRhdGVPcBIeChZ0",
            "cmFuc2FjdGlvbl9kZXNjcmlwdG9yGAIgASgMIl4KE0FwYlN0YXJ0VHJhbnNh",
            "Y3Rpb24SEQoJdGltZXN0YW1wGAEgASgMEjQKCnByb3BlcnRpZXMYAiABKAsy",
            "IC5BbnRpZG90ZS5Qcm90by5BcGJUeG5Qcm9wZXJ0aWVzIjUKE0FwYkFib3J0",
            "VHJhbnNhY3Rpb24SHgoWdHJhbnNhY3Rpb25fZGVzY3JpcHRvchgBIAEoDCI2",
            "ChRBcGJDb21taXRUcmFuc2FjdGlvbhIeChZ0cmFuc2FjdGlvbl9kZXNjcmlw",
            "dG9yGAEgASgMIoABChZBcGJTdGF0aWNVcGRhdGVPYmplY3RzEjgKC3RyYW5z",
            "YWN0aW9uGAEgASgLMiMuQW50aWRvdGUuUHJvdG8uQXBiU3RhcnRUcmFuc2Fj",
            "dGlvbhIsCgd1cGRhdGVzGAIgAygLMhsuQW50aWRvdGUuUHJvdG8uQXBiVXBk",
            "YXRlT3AigQEKFEFwYlN0YXRpY1JlYWRPYmplY3RzEjgKC3RyYW5zYWN0aW9u",
            "GAEgASgLMiMuQW50aWRvdGUuUHJvdG8uQXBiU3RhcnRUcmFuc2FjdGlvbhIv",
            "CgdvYmplY3RzGAIgAygLMh4uQW50aWRvdGUuUHJvdG8uQXBiQm91bmRPYmpl",
            "Y3QiXQoXQXBiU3RhcnRUcmFuc2FjdGlvblJlc3ASDwoHc3VjY2VzcxgBIAEo",
            "CBIeChZ0cmFuc2FjdGlvbl9kZXNjcmlwdG9yGAIgASgMEhEKCWVycm9yY29k",
            "ZRgDIAEoDSLdAgoRQXBiUmVhZE9iamVjdFJlc3ASMgoHY291bnRlchgBIAEo",
            "CzIhLkFudGlkb3RlLlByb3RvLkFwYkdldENvdW50ZXJSZXNwEioKA3NldBgC",
            "IAEoCzIdLkFudGlkb3RlLlByb3RvLkFwYkdldFNldFJlc3ASKgoDcmVnGAMg",
            "ASgLMh0uQW50aWRvdGUuUHJvdG8uQXBiR2V0UmVnUmVzcBIuCgVtdnJlZxgE",
            "IAEoCzIfLkFudGlkb3RlLlByb3RvLkFwYkdldE1WUmVnUmVzcBIuCgNpbnQY",
            "BSABKAsyIS5BbnRpZG90ZS5Qcm90by5BcGJHZXRJbnRlZ2VyUmVzcBIqCgNt",
            "YXAYBiABKAsyHS5BbnRpZG90ZS5Qcm90by5BcGJHZXRNYXBSZXNwEjAKBnBv",
            "bGljeRgHIAEoCzIgLkFudGlkb3RlLlByb3RvLkFwYkdldFBvbGljeVJlc3Ai",
            "bAoSQXBiUmVhZE9iamVjdHNSZXNwEg8KB3N1Y2Nlc3MYASABKAgSMgoHb2Jq",
            "ZWN0cxgCIAMoCzIhLkFudGlkb3RlLlByb3RvLkFwYlJlYWRPYmplY3RSZXNw",
            "EhEKCWVycm9yY29kZRgDIAEoDSJICg1BcGJDb21taXRSZXNwEg8KB3N1Y2Nl",
            "c3MYASABKAgSEwoLY29tbWl0X3RpbWUYAiABKAwSEQoJZXJyb3Jjb2RlGAMg",
            "ASgNIoIBChhBcGJTdGF0aWNSZWFkT2JqZWN0c1Jlc3ASMwoHb2JqZWN0cxgB",
            "IAEoCzIiLkFudGlkb3RlLlByb3RvLkFwYlJlYWRPYmplY3RzUmVzcBIxCgpj",
            "b21taXR0aW1lGAIgASgLMh0uQW50aWRvdGUuUHJvdG8uQXBiQ29tbWl0UmVz",
            "cCqbAQoJQ1JEVF90eXBlEgsKB1VOS05PV04QABILCgdDT1VOVEVSEAMSCQoF",
            "T1JTRVQQBBIKCgZMV1dSRUcQBRIJCgVNVlJFRxAGEgsKB0lOVEVHRVIQBxII",
            "CgRHTUFQEAgSCQoFQVdNQVAQCRIJCgVSV1NFVBAKEgkKBVJSTUFQEAsSDgoK",
            "RkFUQ09VTlRFUhAMEgoKBlBPTElDWRANYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Antidote.Proto.CRDT_type), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Antidote.Proto.ApbErrorResp), global::Antidote.Proto.ApbErrorResp.Parser, new[]{ "Errmsg", "Errcode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Antidote.Proto.ApbCounterUpdate), global::Antidote.Proto.ApbCounterUpdate.Parser, new[]{ "Inc" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Antidote.Proto.ApbGetCounterResp), global::Antidote.Proto.ApbGetCounterResp.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Antidote.Proto.ApbSetUpdate), global::Antidote.Proto.ApbSetUpdate.Parser, new[]{ "Optype", "Adds", "Rems" }, null, new[]{ typeof(global::Antidote.Proto.ApbSetUpdate.Types.SetOpType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Antidote.Proto.ApbGetSetResp), global::Antidote.Proto.ApbGetSetResp.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Antidote.Proto.ApbRegUpdate), global::Antidote.Proto.ApbRegUpdate.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Antidote.Proto.ApbGetRegResp), global::Antidote.Proto.ApbGetRegResp.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Antidote.Proto.ApbGetMVRegResp), global::Antidote.Proto.ApbGetMVRegResp.Parser, new[]{ "Values" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Antidote.Proto.ApbPolicyUpdate), global::Antidote.Proto.ApbPolicyUpdate.Parser, new[]{ "Permissions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Antidote.Proto.ApbGetPolicyResp), global::Antidote.Proto.ApbGetPolicyResp.Parser, new[]{ "Permissions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Antidote.Proto.ApbIntegerUpdate), global::Antidote.Proto.ApbIntegerUpdate.Parser, new[]{ "Inc", "Set" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Antidote.Proto.ApbGetIntegerResp), global::Antidote.Proto.ApbGetIntegerResp.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Antidote.Proto.ApbMapKey), global::Antidote.Proto.ApbMapKey.Parser, new[]{ "Key", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Antidote.Proto.ApbMapUpdate), global::Antidote.Proto.ApbMapUpdate.Parser, new[]{ "Updates", "RemovedKeys" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Antidote.Proto.ApbMapNestedUpdate), global::Antidote.Proto.ApbMapNestedUpdate.Parser, new[]{ "Key", "Update" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Antidote.Proto.ApbGetMapResp), global::Antidote.Proto.ApbGetMapResp.Parser, new[]{ "Entries" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Antidote.Proto.ApbMapEntry), global::Antidote.Proto.ApbMapEntry.Parser, new[]{ "Key", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Antidote.Proto.ApbCrdtReset), global::Antidote.Proto.ApbCrdtReset.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Antidote.Proto.ApbOperationResp), global::Antidote.Proto.ApbOperationResp.Parser, new[]{ "Success", "Errorcode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Antidote.Proto.ApbTxnProperties), global::Antidote.Proto.ApbTxnProperties.Parser, new[]{ "ReadWrite", "RedBlue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Antidote.Proto.ApbBoundObject), global::Antidote.Proto.ApbBoundObject.Parser, new[]{ "Key", "Type", "Bucket" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Antidote.Proto.ApbReadObjects), global::Antidote.Proto.ApbReadObjects.Parser, new[]{ "Boundobjects", "TransactionDescriptor" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Antidote.Proto.ApbUpdateOp), global::Antidote.Proto.ApbUpdateOp.Parser, new[]{ "Boundobject", "Operation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Antidote.Proto.ApbUpdateOperation), global::Antidote.Proto.ApbUpdateOperation.Parser, new[]{ "Counterop", "Setop", "Regop", "Integerop", "Mapop", "Resetop", "Policyop" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Antidote.Proto.ApbUpdateObjects), global::Antidote.Proto.ApbUpdateObjects.Parser, new[]{ "Updates", "TransactionDescriptor" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Antidote.Proto.ApbStartTransaction), global::Antidote.Proto.ApbStartTransaction.Parser, new[]{ "Timestamp", "Properties" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Antidote.Proto.ApbAbortTransaction), global::Antidote.Proto.ApbAbortTransaction.Parser, new[]{ "TransactionDescriptor" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Antidote.Proto.ApbCommitTransaction), global::Antidote.Proto.ApbCommitTransaction.Parser, new[]{ "TransactionDescriptor" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Antidote.Proto.ApbStaticUpdateObjects), global::Antidote.Proto.ApbStaticUpdateObjects.Parser, new[]{ "Transaction", "Updates" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Antidote.Proto.ApbStaticReadObjects), global::Antidote.Proto.ApbStaticReadObjects.Parser, new[]{ "Transaction", "Objects" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Antidote.Proto.ApbStartTransactionResp), global::Antidote.Proto.ApbStartTransactionResp.Parser, new[]{ "Success", "TransactionDescriptor", "Errorcode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Antidote.Proto.ApbReadObjectResp), global::Antidote.Proto.ApbReadObjectResp.Parser, new[]{ "Counter", "Set", "Reg", "Mvreg", "Int", "Map", "Policy" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Antidote.Proto.ApbReadObjectsResp), global::Antidote.Proto.ApbReadObjectsResp.Parser, new[]{ "Success", "Objects", "Errorcode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Antidote.Proto.ApbCommitResp), global::Antidote.Proto.ApbCommitResp.Parser, new[]{ "Success", "CommitTime", "Errorcode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Antidote.Proto.ApbStaticReadObjectsResp), global::Antidote.Proto.ApbStaticReadObjectsResp.Parser, new[]{ "Objects", "Committime" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  internal enum CRDT_type {
    [pbr::OriginalName("UNKNOWN")] Unknown = 0,
    [pbr::OriginalName("COUNTER")] Counter = 3,
    [pbr::OriginalName("ORSET")] Orset = 4,
    [pbr::OriginalName("LWWREG")] Lwwreg = 5,
    [pbr::OriginalName("MVREG")] Mvreg = 6,
    [pbr::OriginalName("INTEGER")] Integer = 7,
    [pbr::OriginalName("GMAP")] Gmap = 8,
    [pbr::OriginalName("AWMAP")] Awmap = 9,
    [pbr::OriginalName("RWSET")] Rwset = 10,
    [pbr::OriginalName("RRMAP")] Rrmap = 11,
    [pbr::OriginalName("FATCOUNTER")] Fatcounter = 12,
    [pbr::OriginalName("POLICY")] Policy = 13,
  }

  #endregion

  #region Messages
  /// <summary>
  ///------------------
  /// Error messages
  /// </summary>
  internal sealed partial class ApbErrorResp : pb::IMessage<ApbErrorResp> {
    private static readonly pb::MessageParser<ApbErrorResp> _parser = new pb::MessageParser<ApbErrorResp>(() => new ApbErrorResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApbErrorResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Antidote.Proto.AntidoteReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbErrorResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbErrorResp(ApbErrorResp other) : this() {
      errmsg_ = other.errmsg_;
      errcode_ = other.errcode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbErrorResp Clone() {
      return new ApbErrorResp(this);
    }

    /// <summary>Field number for the "errmsg" field.</summary>
    public const int ErrmsgFieldNumber = 1;
    private pb::ByteString errmsg_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Errmsg {
      get { return errmsg_; }
      set {
        errmsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "errcode" field.</summary>
    public const int ErrcodeFieldNumber = 2;
    private uint errcode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Errcode {
      get { return errcode_; }
      set {
        errcode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApbErrorResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApbErrorResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Errmsg != other.Errmsg) return false;
      if (Errcode != other.Errcode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Errmsg.Length != 0) hash ^= Errmsg.GetHashCode();
      if (Errcode != 0) hash ^= Errcode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Errmsg.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Errmsg);
      }
      if (Errcode != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Errcode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Errmsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Errmsg);
      }
      if (Errcode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Errcode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApbErrorResp other) {
      if (other == null) {
        return;
      }
      if (other.Errmsg.Length != 0) {
        Errmsg = other.Errmsg;
      }
      if (other.Errcode != 0) {
        Errcode = other.Errcode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Errmsg = input.ReadBytes();
            break;
          }
          case 16: {
            Errcode = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Counter increment requenst
  /// </summary>
  internal sealed partial class ApbCounterUpdate : pb::IMessage<ApbCounterUpdate> {
    private static readonly pb::MessageParser<ApbCounterUpdate> _parser = new pb::MessageParser<ApbCounterUpdate>(() => new ApbCounterUpdate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApbCounterUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Antidote.Proto.AntidoteReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbCounterUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbCounterUpdate(ApbCounterUpdate other) : this() {
      inc_ = other.inc_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbCounterUpdate Clone() {
      return new ApbCounterUpdate(this);
    }

    /// <summary>Field number for the "inc" field.</summary>
    public const int IncFieldNumber = 1;
    private long inc_;
    /// <summary>
    /// inc indicates the value to be incremented. To decrement, use a negative value. If no value is given, it will be considered as an increment by 1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Inc {
      get { return inc_; }
      set {
        inc_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApbCounterUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApbCounterUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Inc != other.Inc) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Inc != 0L) hash ^= Inc.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Inc != 0L) {
        output.WriteRawTag(8);
        output.WriteSInt64(Inc);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Inc != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Inc);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApbCounterUpdate other) {
      if (other == null) {
        return;
      }
      if (other.Inc != 0L) {
        Inc = other.Inc;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Inc = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Response operation
  /// </summary>
  internal sealed partial class ApbGetCounterResp : pb::IMessage<ApbGetCounterResp> {
    private static readonly pb::MessageParser<ApbGetCounterResp> _parser = new pb::MessageParser<ApbGetCounterResp>(() => new ApbGetCounterResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApbGetCounterResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Antidote.Proto.AntidoteReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbGetCounterResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbGetCounterResp(ApbGetCounterResp other) : this() {
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbGetCounterResp Clone() {
      return new ApbGetCounterResp(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private int value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApbGetCounterResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApbGetCounterResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApbGetCounterResp other) {
      if (other == null) {
        return;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Value = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Set updates request
  /// </summary>
  internal sealed partial class ApbSetUpdate : pb::IMessage<ApbSetUpdate> {
    private static readonly pb::MessageParser<ApbSetUpdate> _parser = new pb::MessageParser<ApbSetUpdate>(() => new ApbSetUpdate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApbSetUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Antidote.Proto.AntidoteReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbSetUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbSetUpdate(ApbSetUpdate other) : this() {
      optype_ = other.optype_;
      adds_ = other.adds_.Clone();
      rems_ = other.rems_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbSetUpdate Clone() {
      return new ApbSetUpdate(this);
    }

    /// <summary>Field number for the "optype" field.</summary>
    public const int OptypeFieldNumber = 1;
    private global::Antidote.Proto.ApbSetUpdate.Types.SetOpType optype_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Antidote.Proto.ApbSetUpdate.Types.SetOpType Optype {
      get { return optype_; }
      set {
        optype_ = value;
      }
    }

    /// <summary>Field number for the "adds" field.</summary>
    public const int AddsFieldNumber = 2;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_adds_codec
        = pb::FieldCodec.ForBytes(18);
    private readonly pbc::RepeatedField<pb::ByteString> adds_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Adds {
      get { return adds_; }
    }

    /// <summary>Field number for the "rems" field.</summary>
    public const int RemsFieldNumber = 3;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_rems_codec
        = pb::FieldCodec.ForBytes(26);
    private readonly pbc::RepeatedField<pb::ByteString> rems_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Rems {
      get { return rems_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApbSetUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApbSetUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Optype != other.Optype) return false;
      if(!adds_.Equals(other.adds_)) return false;
      if(!rems_.Equals(other.rems_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Optype != 0) hash ^= Optype.GetHashCode();
      hash ^= adds_.GetHashCode();
      hash ^= rems_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Optype != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Optype);
      }
      adds_.WriteTo(output, _repeated_adds_codec);
      rems_.WriteTo(output, _repeated_rems_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Optype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Optype);
      }
      size += adds_.CalculateSize(_repeated_adds_codec);
      size += rems_.CalculateSize(_repeated_rems_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApbSetUpdate other) {
      if (other == null) {
        return;
      }
      if (other.Optype != 0) {
        Optype = other.Optype;
      }
      adds_.Add(other.adds_);
      rems_.Add(other.rems_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            optype_ = (global::Antidote.Proto.ApbSetUpdate.Types.SetOpType) input.ReadEnum();
            break;
          }
          case 18: {
            adds_.AddEntriesFrom(input, _repeated_adds_codec);
            break;
          }
          case 26: {
            rems_.AddEntriesFrom(input, _repeated_rems_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ApbSetUpdate message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal enum SetOpType {
        [pbr::OriginalName("UNKNOWN")] Unknown = 0,
        [pbr::OriginalName("ADD")] Add = 1,
        [pbr::OriginalName("REMOVE")] Remove = 2,
      }

    }
    #endregion

  }

  /// <summary>
  /// Get set request
  /// </summary>
  internal sealed partial class ApbGetSetResp : pb::IMessage<ApbGetSetResp> {
    private static readonly pb::MessageParser<ApbGetSetResp> _parser = new pb::MessageParser<ApbGetSetResp>(() => new ApbGetSetResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApbGetSetResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Antidote.Proto.AntidoteReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbGetSetResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbGetSetResp(ApbGetSetResp other) : this() {
      value_ = other.value_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbGetSetResp Clone() {
      return new ApbGetSetResp(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_value_codec
        = pb::FieldCodec.ForBytes(10);
    private readonly pbc::RepeatedField<pb::ByteString> value_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Value {
      get { return value_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApbGetSetResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApbGetSetResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!value_.Equals(other.value_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= value_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      value_.WriteTo(output, _repeated_value_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += value_.CalculateSize(_repeated_value_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApbGetSetResp other) {
      if (other == null) {
        return;
      }
      value_.Add(other.value_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            value_.AddEntriesFrom(input, _repeated_value_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Register update
  /// </summary>
  internal sealed partial class ApbRegUpdate : pb::IMessage<ApbRegUpdate> {
    private static readonly pb::MessageParser<ApbRegUpdate> _parser = new pb::MessageParser<ApbRegUpdate>(() => new ApbRegUpdate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApbRegUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Antidote.Proto.AntidoteReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbRegUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbRegUpdate(ApbRegUpdate other) : this() {
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbRegUpdate Clone() {
      return new ApbRegUpdate(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private pb::ByteString value_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApbRegUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApbRegUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApbRegUpdate other) {
      if (other == null) {
        return;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Value = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Response operation
  /// </summary>
  internal sealed partial class ApbGetRegResp : pb::IMessage<ApbGetRegResp> {
    private static readonly pb::MessageParser<ApbGetRegResp> _parser = new pb::MessageParser<ApbGetRegResp>(() => new ApbGetRegResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApbGetRegResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Antidote.Proto.AntidoteReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbGetRegResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbGetRegResp(ApbGetRegResp other) : this() {
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbGetRegResp Clone() {
      return new ApbGetRegResp(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private pb::ByteString value_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApbGetRegResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApbGetRegResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApbGetRegResp other) {
      if (other == null) {
        return;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Value = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// response:
  /// </summary>
  internal sealed partial class ApbGetMVRegResp : pb::IMessage<ApbGetMVRegResp> {
    private static readonly pb::MessageParser<ApbGetMVRegResp> _parser = new pb::MessageParser<ApbGetMVRegResp>(() => new ApbGetMVRegResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApbGetMVRegResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Antidote.Proto.AntidoteReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbGetMVRegResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbGetMVRegResp(ApbGetMVRegResp other) : this() {
      values_ = other.values_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbGetMVRegResp Clone() {
      return new ApbGetMVRegResp(this);
    }

    /// <summary>Field number for the "values" field.</summary>
    public const int ValuesFieldNumber = 1;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_values_codec
        = pb::FieldCodec.ForBytes(10);
    private readonly pbc::RepeatedField<pb::ByteString> values_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Values {
      get { return values_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApbGetMVRegResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApbGetMVRegResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!values_.Equals(other.values_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= values_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      values_.WriteTo(output, _repeated_values_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += values_.CalculateSize(_repeated_values_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApbGetMVRegResp other) {
      if (other == null) {
        return;
      }
      values_.Add(other.values_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            values_.AddEntriesFrom(input, _repeated_values_codec);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ApbPolicyUpdate : pb::IMessage<ApbPolicyUpdate> {
    private static readonly pb::MessageParser<ApbPolicyUpdate> _parser = new pb::MessageParser<ApbPolicyUpdate>(() => new ApbPolicyUpdate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApbPolicyUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Antidote.Proto.AntidoteReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbPolicyUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbPolicyUpdate(ApbPolicyUpdate other) : this() {
      permissions_ = other.permissions_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbPolicyUpdate Clone() {
      return new ApbPolicyUpdate(this);
    }

    /// <summary>Field number for the "permissions" field.</summary>
    public const int PermissionsFieldNumber = 1;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_permissions_codec
        = pb::FieldCodec.ForBytes(10);
    private readonly pbc::RepeatedField<pb::ByteString> permissions_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Permissions {
      get { return permissions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApbPolicyUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApbPolicyUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!permissions_.Equals(other.permissions_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= permissions_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      permissions_.WriteTo(output, _repeated_permissions_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += permissions_.CalculateSize(_repeated_permissions_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApbPolicyUpdate other) {
      if (other == null) {
        return;
      }
      permissions_.Add(other.permissions_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            permissions_.AddEntriesFrom(input, _repeated_permissions_codec);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ApbGetPolicyResp : pb::IMessage<ApbGetPolicyResp> {
    private static readonly pb::MessageParser<ApbGetPolicyResp> _parser = new pb::MessageParser<ApbGetPolicyResp>(() => new ApbGetPolicyResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApbGetPolicyResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Antidote.Proto.AntidoteReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbGetPolicyResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbGetPolicyResp(ApbGetPolicyResp other) : this() {
      permissions_ = other.permissions_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbGetPolicyResp Clone() {
      return new ApbGetPolicyResp(this);
    }

    /// <summary>Field number for the "permissions" field.</summary>
    public const int PermissionsFieldNumber = 1;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_permissions_codec
        = pb::FieldCodec.ForBytes(10);
    private readonly pbc::RepeatedField<pb::ByteString> permissions_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Permissions {
      get { return permissions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApbGetPolicyResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApbGetPolicyResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!permissions_.Equals(other.permissions_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= permissions_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      permissions_.WriteTo(output, _repeated_permissions_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += permissions_.CalculateSize(_repeated_permissions_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApbGetPolicyResp other) {
      if (other == null) {
        return;
      }
      permissions_.Add(other.permissions_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            permissions_.AddEntriesFrom(input, _repeated_permissions_codec);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ApbIntegerUpdate : pb::IMessage<ApbIntegerUpdate> {
    private static readonly pb::MessageParser<ApbIntegerUpdate> _parser = new pb::MessageParser<ApbIntegerUpdate>(() => new ApbIntegerUpdate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApbIntegerUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Antidote.Proto.AntidoteReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbIntegerUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbIntegerUpdate(ApbIntegerUpdate other) : this() {
      inc_ = other.inc_;
      set_ = other.set_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbIntegerUpdate Clone() {
      return new ApbIntegerUpdate(this);
    }

    /// <summary>Field number for the "inc" field.</summary>
    public const int IncFieldNumber = 1;
    private long inc_;
    /// <summary>
    /// choose one of the following:
    /// increment the integer
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Inc {
      get { return inc_; }
      set {
        inc_ = value;
      }
    }

    /// <summary>Field number for the "set" field.</summary>
    public const int SetFieldNumber = 2;
    private long set_;
    /// <summary>
    /// set the integer to a number
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Set {
      get { return set_; }
      set {
        set_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApbIntegerUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApbIntegerUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Inc != other.Inc) return false;
      if (Set != other.Set) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Inc != 0L) hash ^= Inc.GetHashCode();
      if (Set != 0L) hash ^= Set.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Inc != 0L) {
        output.WriteRawTag(8);
        output.WriteSInt64(Inc);
      }
      if (Set != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(Set);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Inc != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Inc);
      }
      if (Set != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Set);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApbIntegerUpdate other) {
      if (other == null) {
        return;
      }
      if (other.Inc != 0L) {
        Inc = other.Inc;
      }
      if (other.Set != 0L) {
        Set = other.Set;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Inc = input.ReadSInt64();
            break;
          }
          case 16: {
            Set = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ApbGetIntegerResp : pb::IMessage<ApbGetIntegerResp> {
    private static readonly pb::MessageParser<ApbGetIntegerResp> _parser = new pb::MessageParser<ApbGetIntegerResp>(() => new ApbGetIntegerResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApbGetIntegerResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Antidote.Proto.AntidoteReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbGetIntegerResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbGetIntegerResp(ApbGetIntegerResp other) : this() {
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbGetIntegerResp Clone() {
      return new ApbGetIntegerResp(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private long value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApbGetIntegerResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApbGetIntegerResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value != 0L) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value != 0L) {
        output.WriteRawTag(8);
        output.WriteSInt64(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApbGetIntegerResp other) {
      if (other == null) {
        return;
      }
      if (other.Value != 0L) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Value = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ApbMapKey : pb::IMessage<ApbMapKey> {
    private static readonly pb::MessageParser<ApbMapKey> _parser = new pb::MessageParser<ApbMapKey>(() => new ApbMapKey());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApbMapKey> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Antidote.Proto.AntidoteReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbMapKey() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbMapKey(ApbMapKey other) : this() {
      key_ = other.key_;
      type_ = other.type_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbMapKey Clone() {
      return new ApbMapKey(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private pb::ByteString key_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Antidote.Proto.CRDT_type type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Antidote.Proto.CRDT_type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApbMapKey);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApbMapKey other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Type != other.Type) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Key);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Key);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApbMapKey other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Key = input.ReadBytes();
            break;
          }
          case 16: {
            type_ = (global::Antidote.Proto.CRDT_type) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ApbMapUpdate : pb::IMessage<ApbMapUpdate> {
    private static readonly pb::MessageParser<ApbMapUpdate> _parser = new pb::MessageParser<ApbMapUpdate>(() => new ApbMapUpdate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApbMapUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Antidote.Proto.AntidoteReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbMapUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbMapUpdate(ApbMapUpdate other) : this() {
      updates_ = other.updates_.Clone();
      removedKeys_ = other.removedKeys_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbMapUpdate Clone() {
      return new ApbMapUpdate(this);
    }

    /// <summary>Field number for the "updates" field.</summary>
    public const int UpdatesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Antidote.Proto.ApbMapNestedUpdate> _repeated_updates_codec
        = pb::FieldCodec.ForMessage(10, global::Antidote.Proto.ApbMapNestedUpdate.Parser);
    private readonly pbc::RepeatedField<global::Antidote.Proto.ApbMapNestedUpdate> updates_ = new pbc::RepeatedField<global::Antidote.Proto.ApbMapNestedUpdate>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Antidote.Proto.ApbMapNestedUpdate> Updates {
      get { return updates_; }
    }

    /// <summary>Field number for the "removedKeys" field.</summary>
    public const int RemovedKeysFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Antidote.Proto.ApbMapKey> _repeated_removedKeys_codec
        = pb::FieldCodec.ForMessage(18, global::Antidote.Proto.ApbMapKey.Parser);
    private readonly pbc::RepeatedField<global::Antidote.Proto.ApbMapKey> removedKeys_ = new pbc::RepeatedField<global::Antidote.Proto.ApbMapKey>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Antidote.Proto.ApbMapKey> RemovedKeys {
      get { return removedKeys_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApbMapUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApbMapUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!updates_.Equals(other.updates_)) return false;
      if(!removedKeys_.Equals(other.removedKeys_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= updates_.GetHashCode();
      hash ^= removedKeys_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      updates_.WriteTo(output, _repeated_updates_codec);
      removedKeys_.WriteTo(output, _repeated_removedKeys_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += updates_.CalculateSize(_repeated_updates_codec);
      size += removedKeys_.CalculateSize(_repeated_removedKeys_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApbMapUpdate other) {
      if (other == null) {
        return;
      }
      updates_.Add(other.updates_);
      removedKeys_.Add(other.removedKeys_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            updates_.AddEntriesFrom(input, _repeated_updates_codec);
            break;
          }
          case 18: {
            removedKeys_.AddEntriesFrom(input, _repeated_removedKeys_codec);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ApbMapNestedUpdate : pb::IMessage<ApbMapNestedUpdate> {
    private static readonly pb::MessageParser<ApbMapNestedUpdate> _parser = new pb::MessageParser<ApbMapNestedUpdate>(() => new ApbMapNestedUpdate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApbMapNestedUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Antidote.Proto.AntidoteReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbMapNestedUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbMapNestedUpdate(ApbMapNestedUpdate other) : this() {
      Key = other.key_ != null ? other.Key.Clone() : null;
      Update = other.update_ != null ? other.Update.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbMapNestedUpdate Clone() {
      return new ApbMapNestedUpdate(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private global::Antidote.Proto.ApbMapKey key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Antidote.Proto.ApbMapKey Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "update" field.</summary>
    public const int UpdateFieldNumber = 2;
    private global::Antidote.Proto.ApbUpdateOperation update_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Antidote.Proto.ApbUpdateOperation Update {
      get { return update_; }
      set {
        update_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApbMapNestedUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApbMapNestedUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Key, other.Key)) return false;
      if (!object.Equals(Update, other.Update)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (key_ != null) hash ^= Key.GetHashCode();
      if (update_ != null) hash ^= Update.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (key_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Key);
      }
      if (update_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Update);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (key_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Key);
      }
      if (update_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Update);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApbMapNestedUpdate other) {
      if (other == null) {
        return;
      }
      if (other.key_ != null) {
        if (key_ == null) {
          key_ = new global::Antidote.Proto.ApbMapKey();
        }
        Key.MergeFrom(other.Key);
      }
      if (other.update_ != null) {
        if (update_ == null) {
          update_ = new global::Antidote.Proto.ApbUpdateOperation();
        }
        Update.MergeFrom(other.Update);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (key_ == null) {
              key_ = new global::Antidote.Proto.ApbMapKey();
            }
            input.ReadMessage(key_);
            break;
          }
          case 18: {
            if (update_ == null) {
              update_ = new global::Antidote.Proto.ApbUpdateOperation();
            }
            input.ReadMessage(update_);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ApbGetMapResp : pb::IMessage<ApbGetMapResp> {
    private static readonly pb::MessageParser<ApbGetMapResp> _parser = new pb::MessageParser<ApbGetMapResp>(() => new ApbGetMapResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApbGetMapResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Antidote.Proto.AntidoteReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbGetMapResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbGetMapResp(ApbGetMapResp other) : this() {
      entries_ = other.entries_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbGetMapResp Clone() {
      return new ApbGetMapResp(this);
    }

    /// <summary>Field number for the "entries" field.</summary>
    public const int EntriesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Antidote.Proto.ApbMapEntry> _repeated_entries_codec
        = pb::FieldCodec.ForMessage(10, global::Antidote.Proto.ApbMapEntry.Parser);
    private readonly pbc::RepeatedField<global::Antidote.Proto.ApbMapEntry> entries_ = new pbc::RepeatedField<global::Antidote.Proto.ApbMapEntry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Antidote.Proto.ApbMapEntry> Entries {
      get { return entries_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApbGetMapResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApbGetMapResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!entries_.Equals(other.entries_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= entries_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      entries_.WriteTo(output, _repeated_entries_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += entries_.CalculateSize(_repeated_entries_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApbGetMapResp other) {
      if (other == null) {
        return;
      }
      entries_.Add(other.entries_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            entries_.AddEntriesFrom(input, _repeated_entries_codec);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ApbMapEntry : pb::IMessage<ApbMapEntry> {
    private static readonly pb::MessageParser<ApbMapEntry> _parser = new pb::MessageParser<ApbMapEntry>(() => new ApbMapEntry());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApbMapEntry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Antidote.Proto.AntidoteReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbMapEntry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbMapEntry(ApbMapEntry other) : this() {
      Key = other.key_ != null ? other.Key.Clone() : null;
      Value = other.value_ != null ? other.Value.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbMapEntry Clone() {
      return new ApbMapEntry(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private global::Antidote.Proto.ApbMapKey key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Antidote.Proto.ApbMapKey Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private global::Antidote.Proto.ApbReadObjectResp value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Antidote.Proto.ApbReadObjectResp Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApbMapEntry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApbMapEntry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Key, other.Key)) return false;
      if (!object.Equals(Value, other.Value)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (key_ != null) hash ^= Key.GetHashCode();
      if (value_ != null) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (key_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Key);
      }
      if (value_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (key_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Key);
      }
      if (value_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApbMapEntry other) {
      if (other == null) {
        return;
      }
      if (other.key_ != null) {
        if (key_ == null) {
          key_ = new global::Antidote.Proto.ApbMapKey();
        }
        Key.MergeFrom(other.Key);
      }
      if (other.value_ != null) {
        if (value_ == null) {
          value_ = new global::Antidote.Proto.ApbReadObjectResp();
        }
        Value.MergeFrom(other.Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (key_ == null) {
              key_ = new global::Antidote.Proto.ApbMapKey();
            }
            input.ReadMessage(key_);
            break;
          }
          case 18: {
            if (value_ == null) {
              value_ = new global::Antidote.Proto.ApbReadObjectResp();
            }
            input.ReadMessage(value_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// General reset operation
  /// </summary>
  internal sealed partial class ApbCrdtReset : pb::IMessage<ApbCrdtReset> {
    private static readonly pb::MessageParser<ApbCrdtReset> _parser = new pb::MessageParser<ApbCrdtReset>(() => new ApbCrdtReset());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApbCrdtReset> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Antidote.Proto.AntidoteReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbCrdtReset() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbCrdtReset(ApbCrdtReset other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbCrdtReset Clone() {
      return new ApbCrdtReset(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApbCrdtReset);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApbCrdtReset other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApbCrdtReset other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// Response operation
  /// </summary>
  internal sealed partial class ApbOperationResp : pb::IMessage<ApbOperationResp> {
    private static readonly pb::MessageParser<ApbOperationResp> _parser = new pb::MessageParser<ApbOperationResp>(() => new ApbOperationResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApbOperationResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Antidote.Proto.AntidoteReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbOperationResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbOperationResp(ApbOperationResp other) : this() {
      success_ = other.success_;
      errorcode_ = other.errorcode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbOperationResp Clone() {
      return new ApbOperationResp(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "errorcode" field.</summary>
    public const int ErrorcodeFieldNumber = 2;
    private uint errorcode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Errorcode {
      get { return errorcode_; }
      set {
        errorcode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApbOperationResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApbOperationResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if (Errorcode != other.Errorcode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      if (Errorcode != 0) hash ^= Errorcode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (Errorcode != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Errorcode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      if (Errorcode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Errorcode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApbOperationResp other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      if (other.Errorcode != 0) {
        Errorcode = other.Errorcode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 16: {
            Errorcode = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Properties parameters of a transaction
  /// </summary>
  internal sealed partial class ApbTxnProperties : pb::IMessage<ApbTxnProperties> {
    private static readonly pb::MessageParser<ApbTxnProperties> _parser = new pb::MessageParser<ApbTxnProperties>(() => new ApbTxnProperties());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApbTxnProperties> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Antidote.Proto.AntidoteReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbTxnProperties() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbTxnProperties(ApbTxnProperties other) : this() {
      readWrite_ = other.readWrite_;
      redBlue_ = other.redBlue_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbTxnProperties Clone() {
      return new ApbTxnProperties(this);
    }

    /// <summary>Field number for the "read_write" field.</summary>
    public const int ReadWriteFieldNumber = 1;
    private uint readWrite_;
    /// <summary>
    ///default = 0 = read_write, 1 = read_only, 2 = write_only
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ReadWrite {
      get { return readWrite_; }
      set {
        readWrite_ = value;
      }
    }

    /// <summary>Field number for the "red_blue" field.</summary>
    public const int RedBlueFieldNumber = 2;
    private uint redBlue_;
    /// <summary>
    /// default = 0 = blue, 1 = red
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RedBlue {
      get { return redBlue_; }
      set {
        redBlue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApbTxnProperties);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApbTxnProperties other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReadWrite != other.ReadWrite) return false;
      if (RedBlue != other.RedBlue) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReadWrite != 0) hash ^= ReadWrite.GetHashCode();
      if (RedBlue != 0) hash ^= RedBlue.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReadWrite != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ReadWrite);
      }
      if (RedBlue != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(RedBlue);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReadWrite != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ReadWrite);
      }
      if (RedBlue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RedBlue);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApbTxnProperties other) {
      if (other == null) {
        return;
      }
      if (other.ReadWrite != 0) {
        ReadWrite = other.ReadWrite;
      }
      if (other.RedBlue != 0) {
        RedBlue = other.RedBlue;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReadWrite = input.ReadUInt32();
            break;
          }
          case 16: {
            RedBlue = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Object (Key) representation
  /// </summary>
  internal sealed partial class ApbBoundObject : pb::IMessage<ApbBoundObject> {
    private static readonly pb::MessageParser<ApbBoundObject> _parser = new pb::MessageParser<ApbBoundObject>(() => new ApbBoundObject());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApbBoundObject> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Antidote.Proto.AntidoteReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbBoundObject() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbBoundObject(ApbBoundObject other) : this() {
      key_ = other.key_;
      type_ = other.type_;
      bucket_ = other.bucket_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbBoundObject Clone() {
      return new ApbBoundObject(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private pb::ByteString key_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Antidote.Proto.CRDT_type type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Antidote.Proto.CRDT_type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "bucket" field.</summary>
    public const int BucketFieldNumber = 3;
    private pb::ByteString bucket_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Bucket {
      get { return bucket_; }
      set {
        bucket_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApbBoundObject);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApbBoundObject other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Type != other.Type) return false;
      if (Bucket != other.Bucket) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Bucket.Length != 0) hash ^= Bucket.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Key);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (Bucket.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Bucket);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Key);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Bucket.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Bucket);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApbBoundObject other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Bucket.Length != 0) {
        Bucket = other.Bucket;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Key = input.ReadBytes();
            break;
          }
          case 16: {
            type_ = (global::Antidote.Proto.CRDT_type) input.ReadEnum();
            break;
          }
          case 26: {
            Bucket = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Objects to be read
  /// </summary>
  internal sealed partial class ApbReadObjects : pb::IMessage<ApbReadObjects> {
    private static readonly pb::MessageParser<ApbReadObjects> _parser = new pb::MessageParser<ApbReadObjects>(() => new ApbReadObjects());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApbReadObjects> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Antidote.Proto.AntidoteReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbReadObjects() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbReadObjects(ApbReadObjects other) : this() {
      boundobjects_ = other.boundobjects_.Clone();
      transactionDescriptor_ = other.transactionDescriptor_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbReadObjects Clone() {
      return new ApbReadObjects(this);
    }

    /// <summary>Field number for the "boundobjects" field.</summary>
    public const int BoundobjectsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Antidote.Proto.ApbBoundObject> _repeated_boundobjects_codec
        = pb::FieldCodec.ForMessage(10, global::Antidote.Proto.ApbBoundObject.Parser);
    private readonly pbc::RepeatedField<global::Antidote.Proto.ApbBoundObject> boundobjects_ = new pbc::RepeatedField<global::Antidote.Proto.ApbBoundObject>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Antidote.Proto.ApbBoundObject> Boundobjects {
      get { return boundobjects_; }
    }

    /// <summary>Field number for the "transaction_descriptor" field.</summary>
    public const int TransactionDescriptorFieldNumber = 2;
    private pb::ByteString transactionDescriptor_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TransactionDescriptor {
      get { return transactionDescriptor_; }
      set {
        transactionDescriptor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApbReadObjects);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApbReadObjects other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!boundobjects_.Equals(other.boundobjects_)) return false;
      if (TransactionDescriptor != other.TransactionDescriptor) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= boundobjects_.GetHashCode();
      if (TransactionDescriptor.Length != 0) hash ^= TransactionDescriptor.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      boundobjects_.WriteTo(output, _repeated_boundobjects_codec);
      if (TransactionDescriptor.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(TransactionDescriptor);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += boundobjects_.CalculateSize(_repeated_boundobjects_codec);
      if (TransactionDescriptor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TransactionDescriptor);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApbReadObjects other) {
      if (other == null) {
        return;
      }
      boundobjects_.Add(other.boundobjects_);
      if (other.TransactionDescriptor.Length != 0) {
        TransactionDescriptor = other.TransactionDescriptor;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            boundobjects_.AddEntriesFrom(input, _repeated_boundobjects_codec);
            break;
          }
          case 18: {
            TransactionDescriptor = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// An Object to be updated with specified operation
  /// </summary>
  internal sealed partial class ApbUpdateOp : pb::IMessage<ApbUpdateOp> {
    private static readonly pb::MessageParser<ApbUpdateOp> _parser = new pb::MessageParser<ApbUpdateOp>(() => new ApbUpdateOp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApbUpdateOp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Antidote.Proto.AntidoteReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbUpdateOp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbUpdateOp(ApbUpdateOp other) : this() {
      Boundobject = other.boundobject_ != null ? other.Boundobject.Clone() : null;
      Operation = other.operation_ != null ? other.Operation.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbUpdateOp Clone() {
      return new ApbUpdateOp(this);
    }

    /// <summary>Field number for the "boundobject" field.</summary>
    public const int BoundobjectFieldNumber = 1;
    private global::Antidote.Proto.ApbBoundObject boundobject_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Antidote.Proto.ApbBoundObject Boundobject {
      get { return boundobject_; }
      set {
        boundobject_ = value;
      }
    }

    /// <summary>Field number for the "operation" field.</summary>
    public const int OperationFieldNumber = 2;
    private global::Antidote.Proto.ApbUpdateOperation operation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Antidote.Proto.ApbUpdateOperation Operation {
      get { return operation_; }
      set {
        operation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApbUpdateOp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApbUpdateOp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Boundobject, other.Boundobject)) return false;
      if (!object.Equals(Operation, other.Operation)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (boundobject_ != null) hash ^= Boundobject.GetHashCode();
      if (operation_ != null) hash ^= Operation.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (boundobject_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Boundobject);
      }
      if (operation_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Operation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (boundobject_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Boundobject);
      }
      if (operation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Operation);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApbUpdateOp other) {
      if (other == null) {
        return;
      }
      if (other.boundobject_ != null) {
        if (boundobject_ == null) {
          boundobject_ = new global::Antidote.Proto.ApbBoundObject();
        }
        Boundobject.MergeFrom(other.Boundobject);
      }
      if (other.operation_ != null) {
        if (operation_ == null) {
          operation_ = new global::Antidote.Proto.ApbUpdateOperation();
        }
        Operation.MergeFrom(other.Operation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (boundobject_ == null) {
              boundobject_ = new global::Antidote.Proto.ApbBoundObject();
            }
            input.ReadMessage(boundobject_);
            break;
          }
          case 18: {
            if (operation_ == null) {
              operation_ = new global::Antidote.Proto.ApbUpdateOperation();
            }
            input.ReadMessage(operation_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// TODO use this above
  /// </summary>
  internal sealed partial class ApbUpdateOperation : pb::IMessage<ApbUpdateOperation> {
    private static readonly pb::MessageParser<ApbUpdateOperation> _parser = new pb::MessageParser<ApbUpdateOperation>(() => new ApbUpdateOperation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApbUpdateOperation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Antidote.Proto.AntidoteReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbUpdateOperation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbUpdateOperation(ApbUpdateOperation other) : this() {
      Counterop = other.counterop_ != null ? other.Counterop.Clone() : null;
      Setop = other.setop_ != null ? other.Setop.Clone() : null;
      Regop = other.regop_ != null ? other.Regop.Clone() : null;
      Integerop = other.integerop_ != null ? other.Integerop.Clone() : null;
      Mapop = other.mapop_ != null ? other.Mapop.Clone() : null;
      Resetop = other.resetop_ != null ? other.Resetop.Clone() : null;
      Policyop = other.policyop_ != null ? other.Policyop.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbUpdateOperation Clone() {
      return new ApbUpdateOperation(this);
    }

    /// <summary>Field number for the "counterop" field.</summary>
    public const int CounteropFieldNumber = 1;
    private global::Antidote.Proto.ApbCounterUpdate counterop_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Antidote.Proto.ApbCounterUpdate Counterop {
      get { return counterop_; }
      set {
        counterop_ = value;
      }
    }

    /// <summary>Field number for the "setop" field.</summary>
    public const int SetopFieldNumber = 2;
    private global::Antidote.Proto.ApbSetUpdate setop_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Antidote.Proto.ApbSetUpdate Setop {
      get { return setop_; }
      set {
        setop_ = value;
      }
    }

    /// <summary>Field number for the "regop" field.</summary>
    public const int RegopFieldNumber = 3;
    private global::Antidote.Proto.ApbRegUpdate regop_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Antidote.Proto.ApbRegUpdate Regop {
      get { return regop_; }
      set {
        regop_ = value;
      }
    }

    /// <summary>Field number for the "integerop" field.</summary>
    public const int IntegeropFieldNumber = 4;
    private global::Antidote.Proto.ApbIntegerUpdate integerop_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Antidote.Proto.ApbIntegerUpdate Integerop {
      get { return integerop_; }
      set {
        integerop_ = value;
      }
    }

    /// <summary>Field number for the "mapop" field.</summary>
    public const int MapopFieldNumber = 5;
    private global::Antidote.Proto.ApbMapUpdate mapop_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Antidote.Proto.ApbMapUpdate Mapop {
      get { return mapop_; }
      set {
        mapop_ = value;
      }
    }

    /// <summary>Field number for the "resetop" field.</summary>
    public const int ResetopFieldNumber = 6;
    private global::Antidote.Proto.ApbCrdtReset resetop_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Antidote.Proto.ApbCrdtReset Resetop {
      get { return resetop_; }
      set {
        resetop_ = value;
      }
    }

    /// <summary>Field number for the "policyop" field.</summary>
    public const int PolicyopFieldNumber = 7;
    private global::Antidote.Proto.ApbPolicyUpdate policyop_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Antidote.Proto.ApbPolicyUpdate Policyop {
      get { return policyop_; }
      set {
        policyop_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApbUpdateOperation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApbUpdateOperation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Counterop, other.Counterop)) return false;
      if (!object.Equals(Setop, other.Setop)) return false;
      if (!object.Equals(Regop, other.Regop)) return false;
      if (!object.Equals(Integerop, other.Integerop)) return false;
      if (!object.Equals(Mapop, other.Mapop)) return false;
      if (!object.Equals(Resetop, other.Resetop)) return false;
      if (!object.Equals(Policyop, other.Policyop)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (counterop_ != null) hash ^= Counterop.GetHashCode();
      if (setop_ != null) hash ^= Setop.GetHashCode();
      if (regop_ != null) hash ^= Regop.GetHashCode();
      if (integerop_ != null) hash ^= Integerop.GetHashCode();
      if (mapop_ != null) hash ^= Mapop.GetHashCode();
      if (resetop_ != null) hash ^= Resetop.GetHashCode();
      if (policyop_ != null) hash ^= Policyop.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (counterop_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Counterop);
      }
      if (setop_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Setop);
      }
      if (regop_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Regop);
      }
      if (integerop_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Integerop);
      }
      if (mapop_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Mapop);
      }
      if (resetop_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Resetop);
      }
      if (policyop_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Policyop);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (counterop_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Counterop);
      }
      if (setop_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Setop);
      }
      if (regop_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Regop);
      }
      if (integerop_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Integerop);
      }
      if (mapop_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mapop);
      }
      if (resetop_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Resetop);
      }
      if (policyop_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Policyop);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApbUpdateOperation other) {
      if (other == null) {
        return;
      }
      if (other.counterop_ != null) {
        if (counterop_ == null) {
          counterop_ = new global::Antidote.Proto.ApbCounterUpdate();
        }
        Counterop.MergeFrom(other.Counterop);
      }
      if (other.setop_ != null) {
        if (setop_ == null) {
          setop_ = new global::Antidote.Proto.ApbSetUpdate();
        }
        Setop.MergeFrom(other.Setop);
      }
      if (other.regop_ != null) {
        if (regop_ == null) {
          regop_ = new global::Antidote.Proto.ApbRegUpdate();
        }
        Regop.MergeFrom(other.Regop);
      }
      if (other.integerop_ != null) {
        if (integerop_ == null) {
          integerop_ = new global::Antidote.Proto.ApbIntegerUpdate();
        }
        Integerop.MergeFrom(other.Integerop);
      }
      if (other.mapop_ != null) {
        if (mapop_ == null) {
          mapop_ = new global::Antidote.Proto.ApbMapUpdate();
        }
        Mapop.MergeFrom(other.Mapop);
      }
      if (other.resetop_ != null) {
        if (resetop_ == null) {
          resetop_ = new global::Antidote.Proto.ApbCrdtReset();
        }
        Resetop.MergeFrom(other.Resetop);
      }
      if (other.policyop_ != null) {
        if (policyop_ == null) {
          policyop_ = new global::Antidote.Proto.ApbPolicyUpdate();
        }
        Policyop.MergeFrom(other.Policyop);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (counterop_ == null) {
              counterop_ = new global::Antidote.Proto.ApbCounterUpdate();
            }
            input.ReadMessage(counterop_);
            break;
          }
          case 18: {
            if (setop_ == null) {
              setop_ = new global::Antidote.Proto.ApbSetUpdate();
            }
            input.ReadMessage(setop_);
            break;
          }
          case 26: {
            if (regop_ == null) {
              regop_ = new global::Antidote.Proto.ApbRegUpdate();
            }
            input.ReadMessage(regop_);
            break;
          }
          case 34: {
            if (integerop_ == null) {
              integerop_ = new global::Antidote.Proto.ApbIntegerUpdate();
            }
            input.ReadMessage(integerop_);
            break;
          }
          case 42: {
            if (mapop_ == null) {
              mapop_ = new global::Antidote.Proto.ApbMapUpdate();
            }
            input.ReadMessage(mapop_);
            break;
          }
          case 50: {
            if (resetop_ == null) {
              resetop_ = new global::Antidote.Proto.ApbCrdtReset();
            }
            input.ReadMessage(resetop_);
            break;
          }
          case 58: {
            if (policyop_ == null) {
              policyop_ = new global::Antidote.Proto.ApbPolicyUpdate();
            }
            input.ReadMessage(policyop_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Objects to be updated
  /// </summary>
  internal sealed partial class ApbUpdateObjects : pb::IMessage<ApbUpdateObjects> {
    private static readonly pb::MessageParser<ApbUpdateObjects> _parser = new pb::MessageParser<ApbUpdateObjects>(() => new ApbUpdateObjects());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApbUpdateObjects> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Antidote.Proto.AntidoteReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbUpdateObjects() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbUpdateObjects(ApbUpdateObjects other) : this() {
      updates_ = other.updates_.Clone();
      transactionDescriptor_ = other.transactionDescriptor_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbUpdateObjects Clone() {
      return new ApbUpdateObjects(this);
    }

    /// <summary>Field number for the "updates" field.</summary>
    public const int UpdatesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Antidote.Proto.ApbUpdateOp> _repeated_updates_codec
        = pb::FieldCodec.ForMessage(10, global::Antidote.Proto.ApbUpdateOp.Parser);
    private readonly pbc::RepeatedField<global::Antidote.Proto.ApbUpdateOp> updates_ = new pbc::RepeatedField<global::Antidote.Proto.ApbUpdateOp>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Antidote.Proto.ApbUpdateOp> Updates {
      get { return updates_; }
    }

    /// <summary>Field number for the "transaction_descriptor" field.</summary>
    public const int TransactionDescriptorFieldNumber = 2;
    private pb::ByteString transactionDescriptor_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TransactionDescriptor {
      get { return transactionDescriptor_; }
      set {
        transactionDescriptor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApbUpdateObjects);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApbUpdateObjects other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!updates_.Equals(other.updates_)) return false;
      if (TransactionDescriptor != other.TransactionDescriptor) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= updates_.GetHashCode();
      if (TransactionDescriptor.Length != 0) hash ^= TransactionDescriptor.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      updates_.WriteTo(output, _repeated_updates_codec);
      if (TransactionDescriptor.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(TransactionDescriptor);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += updates_.CalculateSize(_repeated_updates_codec);
      if (TransactionDescriptor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TransactionDescriptor);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApbUpdateObjects other) {
      if (other == null) {
        return;
      }
      updates_.Add(other.updates_);
      if (other.TransactionDescriptor.Length != 0) {
        TransactionDescriptor = other.TransactionDescriptor;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            updates_.AddEntriesFrom(input, _repeated_updates_codec);
            break;
          }
          case 18: {
            TransactionDescriptor = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Start Transaction
  /// </summary>
  internal sealed partial class ApbStartTransaction : pb::IMessage<ApbStartTransaction> {
    private static readonly pb::MessageParser<ApbStartTransaction> _parser = new pb::MessageParser<ApbStartTransaction>(() => new ApbStartTransaction());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApbStartTransaction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Antidote.Proto.AntidoteReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbStartTransaction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbStartTransaction(ApbStartTransaction other) : this() {
      timestamp_ = other.timestamp_;
      Properties = other.properties_ != null ? other.Properties.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbStartTransaction Clone() {
      return new ApbStartTransaction(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private pb::ByteString timestamp_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "properties" field.</summary>
    public const int PropertiesFieldNumber = 2;
    private global::Antidote.Proto.ApbTxnProperties properties_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Antidote.Proto.ApbTxnProperties Properties {
      get { return properties_; }
      set {
        properties_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApbStartTransaction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApbStartTransaction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Timestamp != other.Timestamp) return false;
      if (!object.Equals(Properties, other.Properties)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Timestamp.Length != 0) hash ^= Timestamp.GetHashCode();
      if (properties_ != null) hash ^= Properties.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Timestamp.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Timestamp);
      }
      if (properties_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Properties);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Timestamp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Timestamp);
      }
      if (properties_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Properties);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApbStartTransaction other) {
      if (other == null) {
        return;
      }
      if (other.Timestamp.Length != 0) {
        Timestamp = other.Timestamp;
      }
      if (other.properties_ != null) {
        if (properties_ == null) {
          properties_ = new global::Antidote.Proto.ApbTxnProperties();
        }
        Properties.MergeFrom(other.Properties);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Timestamp = input.ReadBytes();
            break;
          }
          case 18: {
            if (properties_ == null) {
              properties_ = new global::Antidote.Proto.ApbTxnProperties();
            }
            input.ReadMessage(properties_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Abort Transaction
  /// </summary>
  internal sealed partial class ApbAbortTransaction : pb::IMessage<ApbAbortTransaction> {
    private static readonly pb::MessageParser<ApbAbortTransaction> _parser = new pb::MessageParser<ApbAbortTransaction>(() => new ApbAbortTransaction());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApbAbortTransaction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Antidote.Proto.AntidoteReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbAbortTransaction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbAbortTransaction(ApbAbortTransaction other) : this() {
      transactionDescriptor_ = other.transactionDescriptor_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbAbortTransaction Clone() {
      return new ApbAbortTransaction(this);
    }

    /// <summary>Field number for the "transaction_descriptor" field.</summary>
    public const int TransactionDescriptorFieldNumber = 1;
    private pb::ByteString transactionDescriptor_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TransactionDescriptor {
      get { return transactionDescriptor_; }
      set {
        transactionDescriptor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApbAbortTransaction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApbAbortTransaction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TransactionDescriptor != other.TransactionDescriptor) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TransactionDescriptor.Length != 0) hash ^= TransactionDescriptor.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TransactionDescriptor.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(TransactionDescriptor);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TransactionDescriptor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TransactionDescriptor);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApbAbortTransaction other) {
      if (other == null) {
        return;
      }
      if (other.TransactionDescriptor.Length != 0) {
        TransactionDescriptor = other.TransactionDescriptor;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            TransactionDescriptor = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Commit Transaction
  /// </summary>
  internal sealed partial class ApbCommitTransaction : pb::IMessage<ApbCommitTransaction> {
    private static readonly pb::MessageParser<ApbCommitTransaction> _parser = new pb::MessageParser<ApbCommitTransaction>(() => new ApbCommitTransaction());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApbCommitTransaction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Antidote.Proto.AntidoteReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbCommitTransaction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbCommitTransaction(ApbCommitTransaction other) : this() {
      transactionDescriptor_ = other.transactionDescriptor_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbCommitTransaction Clone() {
      return new ApbCommitTransaction(this);
    }

    /// <summary>Field number for the "transaction_descriptor" field.</summary>
    public const int TransactionDescriptorFieldNumber = 1;
    private pb::ByteString transactionDescriptor_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TransactionDescriptor {
      get { return transactionDescriptor_; }
      set {
        transactionDescriptor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApbCommitTransaction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApbCommitTransaction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TransactionDescriptor != other.TransactionDescriptor) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TransactionDescriptor.Length != 0) hash ^= TransactionDescriptor.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TransactionDescriptor.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(TransactionDescriptor);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TransactionDescriptor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TransactionDescriptor);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApbCommitTransaction other) {
      if (other == null) {
        return;
      }
      if (other.TransactionDescriptor.Length != 0) {
        TransactionDescriptor = other.TransactionDescriptor;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            TransactionDescriptor = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ApbStaticUpdateObjects : pb::IMessage<ApbStaticUpdateObjects> {
    private static readonly pb::MessageParser<ApbStaticUpdateObjects> _parser = new pb::MessageParser<ApbStaticUpdateObjects>(() => new ApbStaticUpdateObjects());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApbStaticUpdateObjects> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Antidote.Proto.AntidoteReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbStaticUpdateObjects() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbStaticUpdateObjects(ApbStaticUpdateObjects other) : this() {
      Transaction = other.transaction_ != null ? other.Transaction.Clone() : null;
      updates_ = other.updates_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbStaticUpdateObjects Clone() {
      return new ApbStaticUpdateObjects(this);
    }

    /// <summary>Field number for the "transaction" field.</summary>
    public const int TransactionFieldNumber = 1;
    private global::Antidote.Proto.ApbStartTransaction transaction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Antidote.Proto.ApbStartTransaction Transaction {
      get { return transaction_; }
      set {
        transaction_ = value;
      }
    }

    /// <summary>Field number for the "updates" field.</summary>
    public const int UpdatesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Antidote.Proto.ApbUpdateOp> _repeated_updates_codec
        = pb::FieldCodec.ForMessage(18, global::Antidote.Proto.ApbUpdateOp.Parser);
    private readonly pbc::RepeatedField<global::Antidote.Proto.ApbUpdateOp> updates_ = new pbc::RepeatedField<global::Antidote.Proto.ApbUpdateOp>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Antidote.Proto.ApbUpdateOp> Updates {
      get { return updates_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApbStaticUpdateObjects);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApbStaticUpdateObjects other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Transaction, other.Transaction)) return false;
      if(!updates_.Equals(other.updates_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (transaction_ != null) hash ^= Transaction.GetHashCode();
      hash ^= updates_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (transaction_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Transaction);
      }
      updates_.WriteTo(output, _repeated_updates_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (transaction_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Transaction);
      }
      size += updates_.CalculateSize(_repeated_updates_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApbStaticUpdateObjects other) {
      if (other == null) {
        return;
      }
      if (other.transaction_ != null) {
        if (transaction_ == null) {
          transaction_ = new global::Antidote.Proto.ApbStartTransaction();
        }
        Transaction.MergeFrom(other.Transaction);
      }
      updates_.Add(other.updates_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (transaction_ == null) {
              transaction_ = new global::Antidote.Proto.ApbStartTransaction();
            }
            input.ReadMessage(transaction_);
            break;
          }
          case 18: {
            updates_.AddEntriesFrom(input, _repeated_updates_codec);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ApbStaticReadObjects : pb::IMessage<ApbStaticReadObjects> {
    private static readonly pb::MessageParser<ApbStaticReadObjects> _parser = new pb::MessageParser<ApbStaticReadObjects>(() => new ApbStaticReadObjects());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApbStaticReadObjects> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Antidote.Proto.AntidoteReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbStaticReadObjects() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbStaticReadObjects(ApbStaticReadObjects other) : this() {
      Transaction = other.transaction_ != null ? other.Transaction.Clone() : null;
      objects_ = other.objects_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbStaticReadObjects Clone() {
      return new ApbStaticReadObjects(this);
    }

    /// <summary>Field number for the "transaction" field.</summary>
    public const int TransactionFieldNumber = 1;
    private global::Antidote.Proto.ApbStartTransaction transaction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Antidote.Proto.ApbStartTransaction Transaction {
      get { return transaction_; }
      set {
        transaction_ = value;
      }
    }

    /// <summary>Field number for the "objects" field.</summary>
    public const int ObjectsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Antidote.Proto.ApbBoundObject> _repeated_objects_codec
        = pb::FieldCodec.ForMessage(18, global::Antidote.Proto.ApbBoundObject.Parser);
    private readonly pbc::RepeatedField<global::Antidote.Proto.ApbBoundObject> objects_ = new pbc::RepeatedField<global::Antidote.Proto.ApbBoundObject>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Antidote.Proto.ApbBoundObject> Objects {
      get { return objects_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApbStaticReadObjects);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApbStaticReadObjects other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Transaction, other.Transaction)) return false;
      if(!objects_.Equals(other.objects_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (transaction_ != null) hash ^= Transaction.GetHashCode();
      hash ^= objects_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (transaction_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Transaction);
      }
      objects_.WriteTo(output, _repeated_objects_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (transaction_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Transaction);
      }
      size += objects_.CalculateSize(_repeated_objects_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApbStaticReadObjects other) {
      if (other == null) {
        return;
      }
      if (other.transaction_ != null) {
        if (transaction_ == null) {
          transaction_ = new global::Antidote.Proto.ApbStartTransaction();
        }
        Transaction.MergeFrom(other.Transaction);
      }
      objects_.Add(other.objects_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (transaction_ == null) {
              transaction_ = new global::Antidote.Proto.ApbStartTransaction();
            }
            input.ReadMessage(transaction_);
            break;
          }
          case 18: {
            objects_.AddEntriesFrom(input, _repeated_objects_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///Start transaction response
  /// </summary>
  internal sealed partial class ApbStartTransactionResp : pb::IMessage<ApbStartTransactionResp> {
    private static readonly pb::MessageParser<ApbStartTransactionResp> _parser = new pb::MessageParser<ApbStartTransactionResp>(() => new ApbStartTransactionResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApbStartTransactionResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Antidote.Proto.AntidoteReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbStartTransactionResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbStartTransactionResp(ApbStartTransactionResp other) : this() {
      success_ = other.success_;
      transactionDescriptor_ = other.transactionDescriptor_;
      errorcode_ = other.errorcode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbStartTransactionResp Clone() {
      return new ApbStartTransactionResp(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "transaction_descriptor" field.</summary>
    public const int TransactionDescriptorFieldNumber = 2;
    private pb::ByteString transactionDescriptor_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TransactionDescriptor {
      get { return transactionDescriptor_; }
      set {
        transactionDescriptor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "errorcode" field.</summary>
    public const int ErrorcodeFieldNumber = 3;
    private uint errorcode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Errorcode {
      get { return errorcode_; }
      set {
        errorcode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApbStartTransactionResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApbStartTransactionResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if (TransactionDescriptor != other.TransactionDescriptor) return false;
      if (Errorcode != other.Errorcode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      if (TransactionDescriptor.Length != 0) hash ^= TransactionDescriptor.GetHashCode();
      if (Errorcode != 0) hash ^= Errorcode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (TransactionDescriptor.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(TransactionDescriptor);
      }
      if (Errorcode != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Errorcode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      if (TransactionDescriptor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TransactionDescriptor);
      }
      if (Errorcode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Errorcode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApbStartTransactionResp other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      if (other.TransactionDescriptor.Length != 0) {
        TransactionDescriptor = other.TransactionDescriptor;
      }
      if (other.Errorcode != 0) {
        Errorcode = other.Errorcode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            TransactionDescriptor = input.ReadBytes();
            break;
          }
          case 24: {
            Errorcode = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///Read Objects Response
  /// </summary>
  internal sealed partial class ApbReadObjectResp : pb::IMessage<ApbReadObjectResp> {
    private static readonly pb::MessageParser<ApbReadObjectResp> _parser = new pb::MessageParser<ApbReadObjectResp>(() => new ApbReadObjectResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApbReadObjectResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Antidote.Proto.AntidoteReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbReadObjectResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbReadObjectResp(ApbReadObjectResp other) : this() {
      Counter = other.counter_ != null ? other.Counter.Clone() : null;
      Set = other.set_ != null ? other.Set.Clone() : null;
      Reg = other.reg_ != null ? other.Reg.Clone() : null;
      Mvreg = other.mvreg_ != null ? other.Mvreg.Clone() : null;
      Int = other.int_ != null ? other.Int.Clone() : null;
      Map = other.map_ != null ? other.Map.Clone() : null;
      Policy = other.policy_ != null ? other.Policy.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbReadObjectResp Clone() {
      return new ApbReadObjectResp(this);
    }

    /// <summary>Field number for the "counter" field.</summary>
    public const int CounterFieldNumber = 1;
    private global::Antidote.Proto.ApbGetCounterResp counter_;
    /// <summary>
    /// one of the following:
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Antidote.Proto.ApbGetCounterResp Counter {
      get { return counter_; }
      set {
        counter_ = value;
      }
    }

    /// <summary>Field number for the "set" field.</summary>
    public const int SetFieldNumber = 2;
    private global::Antidote.Proto.ApbGetSetResp set_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Antidote.Proto.ApbGetSetResp Set {
      get { return set_; }
      set {
        set_ = value;
      }
    }

    /// <summary>Field number for the "reg" field.</summary>
    public const int RegFieldNumber = 3;
    private global::Antidote.Proto.ApbGetRegResp reg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Antidote.Proto.ApbGetRegResp Reg {
      get { return reg_; }
      set {
        reg_ = value;
      }
    }

    /// <summary>Field number for the "mvreg" field.</summary>
    public const int MvregFieldNumber = 4;
    private global::Antidote.Proto.ApbGetMVRegResp mvreg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Antidote.Proto.ApbGetMVRegResp Mvreg {
      get { return mvreg_; }
      set {
        mvreg_ = value;
      }
    }

    /// <summary>Field number for the "int" field.</summary>
    public const int IntFieldNumber = 5;
    private global::Antidote.Proto.ApbGetIntegerResp int_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Antidote.Proto.ApbGetIntegerResp Int {
      get { return int_; }
      set {
        int_ = value;
      }
    }

    /// <summary>Field number for the "map" field.</summary>
    public const int MapFieldNumber = 6;
    private global::Antidote.Proto.ApbGetMapResp map_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Antidote.Proto.ApbGetMapResp Map {
      get { return map_; }
      set {
        map_ = value;
      }
    }

    /// <summary>Field number for the "policy" field.</summary>
    public const int PolicyFieldNumber = 7;
    private global::Antidote.Proto.ApbGetPolicyResp policy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Antidote.Proto.ApbGetPolicyResp Policy {
      get { return policy_; }
      set {
        policy_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApbReadObjectResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApbReadObjectResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Counter, other.Counter)) return false;
      if (!object.Equals(Set, other.Set)) return false;
      if (!object.Equals(Reg, other.Reg)) return false;
      if (!object.Equals(Mvreg, other.Mvreg)) return false;
      if (!object.Equals(Int, other.Int)) return false;
      if (!object.Equals(Map, other.Map)) return false;
      if (!object.Equals(Policy, other.Policy)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (counter_ != null) hash ^= Counter.GetHashCode();
      if (set_ != null) hash ^= Set.GetHashCode();
      if (reg_ != null) hash ^= Reg.GetHashCode();
      if (mvreg_ != null) hash ^= Mvreg.GetHashCode();
      if (int_ != null) hash ^= Int.GetHashCode();
      if (map_ != null) hash ^= Map.GetHashCode();
      if (policy_ != null) hash ^= Policy.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (counter_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Counter);
      }
      if (set_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Set);
      }
      if (reg_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Reg);
      }
      if (mvreg_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Mvreg);
      }
      if (int_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Int);
      }
      if (map_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Map);
      }
      if (policy_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Policy);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (counter_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Counter);
      }
      if (set_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Set);
      }
      if (reg_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Reg);
      }
      if (mvreg_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mvreg);
      }
      if (int_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Int);
      }
      if (map_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Map);
      }
      if (policy_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Policy);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApbReadObjectResp other) {
      if (other == null) {
        return;
      }
      if (other.counter_ != null) {
        if (counter_ == null) {
          counter_ = new global::Antidote.Proto.ApbGetCounterResp();
        }
        Counter.MergeFrom(other.Counter);
      }
      if (other.set_ != null) {
        if (set_ == null) {
          set_ = new global::Antidote.Proto.ApbGetSetResp();
        }
        Set.MergeFrom(other.Set);
      }
      if (other.reg_ != null) {
        if (reg_ == null) {
          reg_ = new global::Antidote.Proto.ApbGetRegResp();
        }
        Reg.MergeFrom(other.Reg);
      }
      if (other.mvreg_ != null) {
        if (mvreg_ == null) {
          mvreg_ = new global::Antidote.Proto.ApbGetMVRegResp();
        }
        Mvreg.MergeFrom(other.Mvreg);
      }
      if (other.int_ != null) {
        if (int_ == null) {
          int_ = new global::Antidote.Proto.ApbGetIntegerResp();
        }
        Int.MergeFrom(other.Int);
      }
      if (other.map_ != null) {
        if (map_ == null) {
          map_ = new global::Antidote.Proto.ApbGetMapResp();
        }
        Map.MergeFrom(other.Map);
      }
      if (other.policy_ != null) {
        if (policy_ == null) {
          policy_ = new global::Antidote.Proto.ApbGetPolicyResp();
        }
        Policy.MergeFrom(other.Policy);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (counter_ == null) {
              counter_ = new global::Antidote.Proto.ApbGetCounterResp();
            }
            input.ReadMessage(counter_);
            break;
          }
          case 18: {
            if (set_ == null) {
              set_ = new global::Antidote.Proto.ApbGetSetResp();
            }
            input.ReadMessage(set_);
            break;
          }
          case 26: {
            if (reg_ == null) {
              reg_ = new global::Antidote.Proto.ApbGetRegResp();
            }
            input.ReadMessage(reg_);
            break;
          }
          case 34: {
            if (mvreg_ == null) {
              mvreg_ = new global::Antidote.Proto.ApbGetMVRegResp();
            }
            input.ReadMessage(mvreg_);
            break;
          }
          case 42: {
            if (int_ == null) {
              int_ = new global::Antidote.Proto.ApbGetIntegerResp();
            }
            input.ReadMessage(int_);
            break;
          }
          case 50: {
            if (map_ == null) {
              map_ = new global::Antidote.Proto.ApbGetMapResp();
            }
            input.ReadMessage(map_);
            break;
          }
          case 58: {
            if (policy_ == null) {
              policy_ = new global::Antidote.Proto.ApbGetPolicyResp();
            }
            input.ReadMessage(policy_);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ApbReadObjectsResp : pb::IMessage<ApbReadObjectsResp> {
    private static readonly pb::MessageParser<ApbReadObjectsResp> _parser = new pb::MessageParser<ApbReadObjectsResp>(() => new ApbReadObjectsResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApbReadObjectsResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Antidote.Proto.AntidoteReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbReadObjectsResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbReadObjectsResp(ApbReadObjectsResp other) : this() {
      success_ = other.success_;
      objects_ = other.objects_.Clone();
      errorcode_ = other.errorcode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbReadObjectsResp Clone() {
      return new ApbReadObjectsResp(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "objects" field.</summary>
    public const int ObjectsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Antidote.Proto.ApbReadObjectResp> _repeated_objects_codec
        = pb::FieldCodec.ForMessage(18, global::Antidote.Proto.ApbReadObjectResp.Parser);
    private readonly pbc::RepeatedField<global::Antidote.Proto.ApbReadObjectResp> objects_ = new pbc::RepeatedField<global::Antidote.Proto.ApbReadObjectResp>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Antidote.Proto.ApbReadObjectResp> Objects {
      get { return objects_; }
    }

    /// <summary>Field number for the "errorcode" field.</summary>
    public const int ErrorcodeFieldNumber = 3;
    private uint errorcode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Errorcode {
      get { return errorcode_; }
      set {
        errorcode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApbReadObjectsResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApbReadObjectsResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if(!objects_.Equals(other.objects_)) return false;
      if (Errorcode != other.Errorcode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      hash ^= objects_.GetHashCode();
      if (Errorcode != 0) hash ^= Errorcode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      objects_.WriteTo(output, _repeated_objects_codec);
      if (Errorcode != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Errorcode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      size += objects_.CalculateSize(_repeated_objects_codec);
      if (Errorcode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Errorcode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApbReadObjectsResp other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      objects_.Add(other.objects_);
      if (other.Errorcode != 0) {
        Errorcode = other.Errorcode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            objects_.AddEntriesFrom(input, _repeated_objects_codec);
            break;
          }
          case 24: {
            Errorcode = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Commit Response
  /// </summary>
  internal sealed partial class ApbCommitResp : pb::IMessage<ApbCommitResp> {
    private static readonly pb::MessageParser<ApbCommitResp> _parser = new pb::MessageParser<ApbCommitResp>(() => new ApbCommitResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApbCommitResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Antidote.Proto.AntidoteReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbCommitResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbCommitResp(ApbCommitResp other) : this() {
      success_ = other.success_;
      commitTime_ = other.commitTime_;
      errorcode_ = other.errorcode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbCommitResp Clone() {
      return new ApbCommitResp(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "commit_time" field.</summary>
    public const int CommitTimeFieldNumber = 2;
    private pb::ByteString commitTime_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CommitTime {
      get { return commitTime_; }
      set {
        commitTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "errorcode" field.</summary>
    public const int ErrorcodeFieldNumber = 3;
    private uint errorcode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Errorcode {
      get { return errorcode_; }
      set {
        errorcode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApbCommitResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApbCommitResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if (CommitTime != other.CommitTime) return false;
      if (Errorcode != other.Errorcode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      if (CommitTime.Length != 0) hash ^= CommitTime.GetHashCode();
      if (Errorcode != 0) hash ^= Errorcode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (CommitTime.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(CommitTime);
      }
      if (Errorcode != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Errorcode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      if (CommitTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CommitTime);
      }
      if (Errorcode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Errorcode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApbCommitResp other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      if (other.CommitTime.Length != 0) {
        CommitTime = other.CommitTime;
      }
      if (other.Errorcode != 0) {
        Errorcode = other.Errorcode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            CommitTime = input.ReadBytes();
            break;
          }
          case 24: {
            Errorcode = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ApbStaticReadObjectsResp : pb::IMessage<ApbStaticReadObjectsResp> {
    private static readonly pb::MessageParser<ApbStaticReadObjectsResp> _parser = new pb::MessageParser<ApbStaticReadObjectsResp>(() => new ApbStaticReadObjectsResp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApbStaticReadObjectsResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Antidote.Proto.AntidoteReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbStaticReadObjectsResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbStaticReadObjectsResp(ApbStaticReadObjectsResp other) : this() {
      Objects = other.objects_ != null ? other.Objects.Clone() : null;
      Committime = other.committime_ != null ? other.Committime.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApbStaticReadObjectsResp Clone() {
      return new ApbStaticReadObjectsResp(this);
    }

    /// <summary>Field number for the "objects" field.</summary>
    public const int ObjectsFieldNumber = 1;
    private global::Antidote.Proto.ApbReadObjectsResp objects_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Antidote.Proto.ApbReadObjectsResp Objects {
      get { return objects_; }
      set {
        objects_ = value;
      }
    }

    /// <summary>Field number for the "committime" field.</summary>
    public const int CommittimeFieldNumber = 2;
    private global::Antidote.Proto.ApbCommitResp committime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Antidote.Proto.ApbCommitResp Committime {
      get { return committime_; }
      set {
        committime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApbStaticReadObjectsResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApbStaticReadObjectsResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Objects, other.Objects)) return false;
      if (!object.Equals(Committime, other.Committime)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (objects_ != null) hash ^= Objects.GetHashCode();
      if (committime_ != null) hash ^= Committime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (objects_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Objects);
      }
      if (committime_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Committime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (objects_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Objects);
      }
      if (committime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Committime);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApbStaticReadObjectsResp other) {
      if (other == null) {
        return;
      }
      if (other.objects_ != null) {
        if (objects_ == null) {
          objects_ = new global::Antidote.Proto.ApbReadObjectsResp();
        }
        Objects.MergeFrom(other.Objects);
      }
      if (other.committime_ != null) {
        if (committime_ == null) {
          committime_ = new global::Antidote.Proto.ApbCommitResp();
        }
        Committime.MergeFrom(other.Committime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (objects_ == null) {
              objects_ = new global::Antidote.Proto.ApbReadObjectsResp();
            }
            input.ReadMessage(objects_);
            break;
          }
          case 18: {
            if (committime_ == null) {
              committime_ = new global::Antidote.Proto.ApbCommitResp();
            }
            input.ReadMessage(committime_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
