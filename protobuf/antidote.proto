syntax = "proto3";
package Antidote.Proto;

enum CRDT_type {
    UNKNOWN = 0;
    COUNTER = 3;
    ORSET = 4;
    LWWREG = 5;
    MVREG = 6;
    INTEGER = 7;
    GMAP = 8;
    AWMAP = 9;
    RWSET = 10;
    RRMAP = 11;
    FATCOUNTER = 12;
    POLICY = 13;
}


//------------------
// Error messages
message ApbErrorResp {
    bytes errmsg = 1;
    uint32 errcode = 2;
}

//------------------
// Counter

// Counter increment requenst
message ApbCounterUpdate {
    // inc indicates the value to be incremented. To decrement, use a negative value. If no value is given, it will be considered as an increment by 1
    sint64 inc = 1;
}

// Response operation
message ApbGetCounterResp {
    sint32 value = 1;
}


//------------------
// Set

// Set updates request
message ApbSetUpdate{
    enum SetOpType // TODO merge adds/removes
    {
        UNKNOWN = 0;
        ADD = 1;
        REMOVE = 2;
    }
    SetOpType optype = 1;
    repeated bytes adds = 2;
    repeated bytes rems = 3;
}

// Get set request
message ApbGetSetResp {
    repeated bytes value = 1;
}

//------------------
// LWW-register

// Register update
message ApbRegUpdate {
    bytes value = 1;
}

// Response operation
message ApbGetRegResp {
    bytes value = 1;
}

//------------------
// MV-register

// use ApbRegUpdate for updates

// response:
message ApbGetMVRegResp {
    repeated bytes values = 1;
}


//------------------
// Policy

message ApbPolicyUpdate {
  repeated bytes permissions = 1;
}

message ApbGetPolicyResp {
  repeated bytes permissions = 1;
}

//------------------
// Integer

message ApbIntegerUpdate {
    // choose one of the following:
    // increment the integer
    sint64 inc = 1;
    // set the integer to a number
    sint64 set = 2;
}

message ApbGetIntegerResp {
    sint64 value = 1;
}

//------------------
// Map


message ApbMapKey {
    bytes key = 1;
    CRDT_type type = 2;
}

message ApbMapUpdate {
    repeated ApbMapNestedUpdate updates = 1;
    repeated ApbMapKey removedKeys = 2;
}

message ApbMapNestedUpdate {
    ApbMapKey key = 1;
    ApbUpdateOperation update = 2;
}

message ApbGetMapResp {
    repeated ApbMapEntry entries = 1;
}

message ApbMapEntry {
    ApbMapKey key = 1;
    ApbReadObjectResp value = 2;
}


// General reset operation
message ApbCrdtReset {

}

// Response operation
message ApbOperationResp {
    bool success = 1;
    uint32 errorcode = 2;
}


//--------------------------------------------------------------

// Properties parameters of a transaction
message ApbTxnProperties {
    uint32 read_write = 1 ; //default = 0 = read_write, 1 = read_only, 2 = write_only
    uint32 red_blue = 2 ; // default = 0 = blue, 1 = red
}

// Object (Key) representation
message ApbBoundObject {
    bytes key = 1;
    CRDT_type type = 2;
    bytes bucket = 3;
}

// Objects to be read
message ApbReadObjects {
    repeated ApbBoundObject boundobjects = 1;
    bytes transaction_descriptor = 2;
}

// An Object to be updated with specified operation
message ApbUpdateOp {
    ApbBoundObject boundobject = 1;
    ApbUpdateOperation operation = 2;
}

message ApbUpdateOperation { // TODO use this above
    ApbCounterUpdate counterop = 1;
    ApbSetUpdate setop = 2;
    ApbRegUpdate regop = 3;
    ApbIntegerUpdate integerop = 4;
    ApbMapUpdate mapop = 5;
    ApbCrdtReset resetop = 6;
    ApbPolicyUpdate policyop = 7;
}

// Objects to be updated
message ApbUpdateObjects {
    repeated ApbUpdateOp updates = 1;
    bytes transaction_descriptor = 2;
}

// Start Transaction
message ApbStartTransaction {
    bytes timestamp = 1;
    ApbTxnProperties properties = 2;
}

// Abort Transaction
message ApbAbortTransaction {
    bytes transaction_descriptor = 1;
}

// Commit Transaction
message ApbCommitTransaction {
    bytes transaction_descriptor = 1;
}


message ApbStaticUpdateObjects{
    ApbStartTransaction transaction = 1;
    repeated ApbUpdateOp updates = 2;
}

message ApbStaticReadObjects{
    ApbStartTransaction transaction = 1;
    repeated ApbBoundObject objects = 2;
}

//Start transaction response
message ApbStartTransactionResp {
    bool success = 1;
    bytes transaction_descriptor = 2;
    uint32 errorcode = 3;
}

//Read Objects Response
message ApbReadObjectResp {
    // one of the following:
    ApbGetCounterResp counter = 1;
    ApbGetSetResp set = 2;
    ApbGetRegResp reg = 3;
    ApbGetMVRegResp mvreg = 4;
    ApbGetIntegerResp int = 5;
    ApbGetMapResp map = 6;
    ApbGetPolicyResp policy = 7;
}
message ApbReadObjectsResp {
    bool success = 1;
    repeated ApbReadObjectResp objects = 2;
    uint32 errorcode = 3;
}

// Commit Response
message ApbCommitResp {
    bool success = 1;
    bytes commit_time = 2;
    uint32 errorcode = 3;
}

message ApbStaticReadObjectsResp {
    ApbReadObjectsResp objects = 1;
    ApbCommitResp committime = 2;
}